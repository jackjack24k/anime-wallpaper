import Base from "../base";
import { CustomProxy } from "../Proxy";
import { TagNames } from "./types/Tags";
import { Artist, Character, NekosImage } from "./types/nekosImage";
import { BaseImageOptions, FullImageOptions } from "./types/baseImageOptions";
import { Tag } from "./types/Tag";
import { ArtistOptions } from "./types/artistOptions";
import { CharacterOptions } from "./types/characterOptions";
import { TagOptions } from "./types/tagOptions";
export declare class NekosAPI extends Base {
    private readonly baseUrl;
    static lastRequest: Date;
    constructor(proxy?: CustomProxy);
    getImage(tags?: TagNames | TagNames[], options?: BaseImageOptions): Promise<NekosImage>;
    getImages(tags?: TagNames | TagNames[], options?: FullImageOptions): Promise<NekosImage[]>;
    private _getImages;
    getRandomImage(tags?: TagNames | TagNames[], options?: BaseImageOptions): Promise<NekosImage>;
    private _getRandomImages;
    getImageByID(id: string | number): Promise<NekosImage>;
    getAllTags(options?: Partial<TagOptions>): Promise<Tag[]>;
    getTagByID(tagID: number): Promise<Tag>;
    getTagByName(tagID: TagNames): Promise<Tag>;
    private _getTagByID;
    getAllArtists(options?: Partial<ArtistOptions>): Promise<Artist[]>;
    getArtistByID(artistID: number): Promise<Artist>;
    getAllCharacters(options?: Partial<CharacterOptions>): Promise<Character[]>;
    getCharacterByID(characterID: number): Promise<Character>;
    private processSearchParams;
}
//# sourceMappingURL=NekosAPI.d.ts.map